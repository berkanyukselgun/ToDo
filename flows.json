[
    {
        "id": "205ea1bbd9a0c513",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1c086d0291bb0ed",
        "type": "http in",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "f97c05c8edfd4c0c"
            ]
        ]
    },
    {
        "id": "73962bb2ec9fa336",
        "type": "http response",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 460,
        "wires": []
    },
    {
        "id": "9efa6877f335ab01",
        "type": "template",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n\n                <form action=\"/opt/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}} border-danger {{/error}}\" placeholder=\"Yoğurt al, ekmek al...\">\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary px-5\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"card mt-2 overflow-hidden\">\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover mb-0\">\n                                <thead class=\"table-dark\">\n                                    <tr>\n                                        <th colspan=\"2\">\n                                            İş\n                                        </th>\n                                <tbody>\n                                    {{#payload}}\n                                    <tr valign=\"middle\">\n                                        <td>\n                                            {{#done}}\n                                            <h4 class=\"text-muted\"><del>{{name}}</del></h4>\n                                            {{/done}}\n                                            {{^done}}\n                                            <h4>{{name}}</h4>\n                                            {{/done}}\n                                            <h4 class=\"badge bg-secondary\"><small> <i class=\"bi bi-calendar\"></i> {{date}} {{time}}</h4>\n                                        </td>\n                                        <td align=\"right\">\n                                            <div class=\"btn-group\">\n                                                <form method=\"POST\">\n                                                    <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n                                                    {{#done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Aç\" type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                                    {{/done}}\n                                                    {{^done}}\n                                                    <a data-bs-toggle=\"tooltip\" data-bs-title=\"Düzenle\" href=\"/edit/{{id}}\" class=\"btn btn-info\"><i class=\"bi bi-pencil\"></i></a>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Hatırlatıcı\" type=\"submit\" class=\"btn btn-secondary\"><i class=\"bi bi-alarm\"></i></button>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Tamamla\" type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\"><i class=\"bi bi-check-lg\"></i></button>\n                                                    {{/done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"Sil\" type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\"><i class=\"bi bi-trash\"></i></button>\n                                                </form>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {{/payload}}\n                                    {{^payload}}\n                                    <tr>\n                                        <td colspan=\"2\" class=\"text-muted\">Henüz hiç giriş yapılmadı...</td>\n                                    </tr>\n                                </tbody>\n                                </tr>\n                                {{/payload}}\n                                </thead>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl)\n        })</script>\n</body>\n\n</html>",
        "output": "str",
        "x": 580,
        "y": 460,
        "wires": [
            [
                "73962bb2ec9fa336"
            ]
        ]
    },
    {
        "id": "6df675b147309c2e",
        "type": "function",
        "z": "205ea1bbd9a0c513",
        "name": "DB",
        "func": "// Flush DB\n\nglobal.set(\"DB\",{\n    todo : []\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n\n/*\n*TODO DB Şema\n*id:NOW\n*name:\"\"\n*done: true|false\n*stamp:{\n     createdAt: NOW,\n     ip: IP,\n     user:\"\"\n     email:\"\"\n     date:\"GG.AA.YYYY\"\n     time:\"SS:DD:NN\"\n}\n**/\n\n\n\nconst DB = global.get(\"DB\") || {\n     todo: [] }\nglobal.set(\"DB\", DB);",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": []
    },
    {
        "id": "0b25e37e341c6ccd",
        "type": "inject",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 300,
        "wires": [
            [
                "6df675b147309c2e"
            ]
        ]
    },
    {
        "id": "f97c05c8edfd4c0c",
        "type": "function",
        "z": "205ea1bbd9a0c513",
        "name": "db.todo.find()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "9efa6877f335ab01"
            ]
        ]
    },
    {
        "id": "4bb4f0ec40ae5292",
        "type": "link in",
        "z": "205ea1bbd9a0c513",
        "name": "link in 2",
        "links": [
            "afd9e96e7e0fb9c3",
            "afa7227acff9d632",
            "d0e0be5e323544ae"
        ],
        "x": 295,
        "y": 360,
        "wires": [
            [
                "f97c05c8edfd4c0c"
            ]
        ]
    },
    {
        "id": "2f2fa6acf863cec4",
        "type": "http in",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 580,
        "wires": [
            [
                "b544e9a4eacba9bc"
            ]
        ]
    },
    {
        "id": "b544e9a4eacba9bc",
        "type": "function",
        "z": "205ea1bbd9a0c513",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silmek\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlamak\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açmak\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Eklemek\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncellemek\",\n        requireArgs: [\"id\", \"name\"]\n    }\n}\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n\n    msg.error = {\n        message: '${msg.req.params.type} geçersiz bir parametre değeridir.'\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n\n    msg.error = {\n        message: '${typeLookup[msg.req.params.type].text} istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArg} bilgisi(leri) olmalı.'\n    }\n    return [null, msg]\n}\n\nreturn msg; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "63f4a5e958ea4651"
            ],
            [
                "afd9e96e7e0fb9c3"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "63f4a5e958ea4651",
        "type": "function",
        "z": "205ea1bbd9a0c513",
        "name": "db.todo.opt()",
        "func": "const DB = global.get(\"DB\")\n\nlet todo = DB.todo\nconst date = new Date()\nconst now = date.getTime()\n\nif (msg.req.params.type === \"add\") {\n\n    todo.push({\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            createdAt: now,\n            ip: msg.req.ip,\n            user: \"\",\n            email: \"\",\n        },\n        date: date.toLocaleDateString(\"TR\"), //DD.AA.YYYY\n        time: date.toLocaleTimeString(\"TR\") //SS:DD:NN\n    })\n}\nelse {\n    const index = todo.findIndex(x => x.id == msg.payload.id)\n\n    if (!~index) {\n\n        msg.error = {\n            message: \"id ile eşleşen bir kayıt bulunamadı.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type=== \"update\" && todo[index].done) {\n\n        msg.error = {\n            message: \"Tamamlanan işler güncellenemez\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type === \"trash\") {\n        todo.splice(index, 1)\n    }\n    else {\n        switch (msg.req.params.type) {\n\n            case \"complete\":\n                todo[index].done = true\n\n                break;\n\n            case \"open\":\n                todo[index].done = false\n\n                break;\n\n            case \"update\":\n                todo[index].name = msg.payload.name\n\n                break;\n\n        }\n        todo[index].stamp = {\n            createdAt: now,\n            ip: msg.req.ip,\n            user: \"\",\n            email: \"\",\n        }\n        todo[index].date = date.toLocaleDateString(\"TR\") //DD.AA.YYYY\n        todo[index].time = date.toLocaleTimeString(\"TR\") //SS:DD:NN\n    }\n\n}\n\nDB.todo = todo //Olmak zorunda değil, referans tutmasından dolayı indexteki objenin ilgili arrayındaki objeyi güncellediğimizde referanstan dolayı güncellenmiş olacaktır.\n\nglobal.set(\"DB\", DB)\n\nreturn msg; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 580,
        "wires": [
            [
                "57e041b9499f88c0"
            ],
            [
                "afa7227acff9d632"
            ]
        ],
        "outputLabels": [
            "Suc",
            "Err"
        ]
    },
    {
        "id": "afd9e96e7e0fb9c3",
        "type": "link out",
        "z": "205ea1bbd9a0c513",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "4bb4f0ec40ae5292"
        ],
        "x": 595,
        "y": 660,
        "wires": []
    },
    {
        "id": "57e041b9499f88c0",
        "type": "http response",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "afa7227acff9d632",
        "type": "link out",
        "z": "205ea1bbd9a0c513",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "4bb4f0ec40ae5292"
        ],
        "x": 815,
        "y": 660,
        "wires": []
    },
    {
        "id": "6de88823bd543921",
        "type": "http in",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 760,
        "wires": [
            [
                "4eff04449648d96c"
            ]
        ]
    },
    {
        "id": "4eff04449648d96c",
        "type": "function",
        "z": "205ea1bbd9a0c513",
        "name": "db.todo.findOne()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo.find(x => x.id == msg.req.params.id)\n\nif (!msg.payload) {\n    msg.error = {\n        message: \"id ile eşleşen bir kayıt bulunamadı.\"\n    }\n    return [null, msg]\n}\n\nif (msg.payload.done) {\n\n    msg.error = {\n        message: \"Tamamlanan işler güncellenemez\"\n    }\n    return [null, msg]\n}\n\nreturn msg; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "c4585f49468c4c8b"
            ],
            [
                "d0e0be5e323544ae"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "c4585f49468c4c8b",
        "type": "template",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n\n                <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\"/>\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" class=\"form-control  form-control-lg {{#error}} border-danger {{/error}}{{^error}} border-info {{/error}}\" placeholder=\"Yoğurt al, ekmek al...\">\n                    </div>\n                    <div class=\"mb-3 float-end\">\n                        <a class=\"btn btn-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-success px-5\" type=\"submit\">Güncelle</button>\n                    </div>\n\n                </form>\n            </div>\n        </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>\n            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl)\n        })\n        </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 720,
        "y": 720,
        "wires": [
            [
                "05cc4c97cbd6f722"
            ]
        ]
    },
    {
        "id": "d0e0be5e323544ae",
        "type": "link out",
        "z": "205ea1bbd9a0c513",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "4bb4f0ec40ae5292"
        ],
        "x": 675,
        "y": 800,
        "wires": []
    },
    {
        "id": "05cc4c97cbd6f722",
        "type": "http response",
        "z": "205ea1bbd9a0c513",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 720,
        "wires": []
    }
]